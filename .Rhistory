library(sf)
library(tidyverse)
sf_use_s2(FALSE)
predictions <- st_read('./data/test_predictions.geojson')
df_old <- st_read('./data/base_polygons/deforestacion_15-19.geojson')
df_old <- st_make_valid(df_old)
predictions <- predictions %>% pivot_longer(cols = c(predictions_rf:predictions_xgb), names_to  = 'model', values_to = 'prediction') %>%
mutate(model = case_when(
model == "predictions_rf" ~ "RF",
model == "predictions_lr" ~ "LR",
model == "predictions_xgb" ~ "XGB"
))
predictions <- predictions %>%
mutate(error = case_when(
label == 1 & prediction == 1 ~ "TP",
label == 1 & prediction == 2 | label == 1 & prediction == 0 ~ "FN",
label == 0 & prediction == 1 | label == 2 & prediction == 1 ~ "FP",
TRUE ~ "TN"))
intersections <- st_intersection(predictions, df_old)
group_int <- intersections %>%
as_tibble()%>%
group_by(error, Fecha) %>%
count() %>%
group_by(error) %>%
mutate(prop = (n/sum(n))*100)
7000/5
11000/5
group_int
group_int <- intersections %>%
as_tibble()%>%
group_by(error, Fecha) %>%
count()
View(predictions)
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count()
group_preds <- predictions %>%
group_by(error, model) %>%
count()
group_preds
group_int
group_preds <- predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count()
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count()
View(group_preds)
View(group_int)
group_int
group_preds %>% filter(model == "RF")
group_preds %>% filter(model == "RF") %>%
bind_rows(group_int)
group_preds %>%
filter(model == "RF") %>%
bind_rows(group_int%>%
filter(model == "RF"))
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
count()
group_int
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n))
group_preds <- predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count() %>%
group_preds %>%
filter(model == "RF") %>%
bind_rows(group_int%>%
filter(model == "RF"))
group_int
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n))
group_preds <- predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count() %>%
group_preds %>%
filter(model == "RF") %>%
bind_rows(group_int%>%
filter(model == "RF"))
group_preds <- predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count()
group_preds %>%
filter(model == "RF") %>%
bind_rows(group_int%>%
filter(model == "RF"))
library(sf)
library(tidyverse)
sf_use_s2(FALSE)
predictions <- st_read('./data/test_predictions.geojson')
df_old <- st_read('./data/base_polygons/deforestacion_15-19.geojson')
df_old <- st_make_valid(df_old)
predictions <- predictions %>% pivot_longer(cols = c(predictions_rf:predictions_xgb), names_to  = 'model', values_to = 'prediction') %>%
mutate(model = case_when(
model == "predictions_rf" ~ "RF",
model == "predictions_lr" ~ "LR",
model == "predictions_xgb" ~ "XGB"
))
predictions <- predictions %>%
mutate(error = case_when(
label == 1 & prediction == 1 ~ "TP",
label == 1 & prediction == 2 | label == 1 & prediction == 0 ~ "FN",
label == 0 & prediction == 1 | label == 2 & prediction == 1 ~ "FP",
TRUE ~ "TN"))
intersections <- st_intersection(predictions, df_old)
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n))
group_preds <- predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count()
group_preds %>%
filter(model == "RF") %>%
bind_rows(group_int%>%
filter(model == "RF"))
ggplot()+
geom_sf(data = df_old)+
geom_sf(data = intersections %>% filter(error == "FP" & Fecha == 2019), aes(color= error), inherit.aes = FALSE)
predictions
predictions
View(predictions)
df_old
intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n))
intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n)) %>% filter(error == "FP" & model == "RF")
intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n)) %>% filter(error == "FP" & model == "RF")
predictions %>%
as_tibble()%>%
group_by(error, model) %>%
count()
group_int <- intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n)) %>% filter(error == "FP" & model == "LR")
group_int
library(sf)
library(tidyverse)
predictions <- st_read('./data/test_predictions.geojson')
df_old <- st_read('./data/base_polygons/deforestacion_15-19.geojson')
df_old <- st_make_valid(df_old)
predictions <- predictions %>% pivot_longer(cols = c(predictions_rf:predictions_xgb), names_to  = 'model', values_to = 'prediction') %>%
mutate(model = case_when(
model == "predictions_rf" ~ "RF",
model == "predictions_lr" ~ "LR",
model == "predictions_xgb" ~ "XGB"
))
predictions <- predictions %>%
mutate(error = case_when(
label == 1 & prediction == 1 ~ "TP",
label == 1 & prediction == 2 | label == 1 & prediction == 0 ~ "FN",
label == 0 & prediction == 1 | label == 2 & prediction == 1 ~ "FP",
TRUE ~ "TN"))
?st_within
intersections <- st_within(df_old, predictions) # Chequear con st_within / st_contain
sf_use_s2(FALSE)
intersections <- st_within(df_old, predictions) # Chequear con st_within / st_contain
intersections
intersections %>%
as_tibble()%>%
group_by(error, model, Fecha)
intersections <- st_contains(df_old, predictions) # Chequear con st_within / st_contain
intersections <- st_within(predictions, df_old) # Chequear con st_within / st_contain
intersections
intersections <- st_within(predictions, df_old)  %>% lengths > 0# Chequear con st_within / st_contain
predictions %>% st_join(df_old)
predictions %>% st_join(df_old, left=FALSE)
intersections <- st_within(predictions, df_old)  %>% lengths > 0# Chequear con st_within / st_contain
intersections <- predictions %>% st_join(df_old, left=FALSE)
intersections %>%
as_tibble()%>%
group_by(error, model, Fecha) %>%
count() %>%
group_by(error, model) %>%
mutate(total = sum(n)) %>% filter(error == "FP" & model == "LR")
group_int <- intersections %>%
as_tibble()%>% filter(error == "FP" & model == "LR" & Fecha == 2019)
View(group_int)
group_by(error, model, Fecha) %>%
count()
View(group_int)
group_int <- intersections %>%
as_tibble()%>% filter(error == "FP" & Fecha == 2019)
View(intersections)
library(tidyverse)
library(purrr)
library(sf)
library(sp)
data <- st_read('./data/training_polygons.geojson')
data
library(tidyverse)
library(purrr)
library(sf)
library(sp)
data <- st_read('./data/training_polygons.geojson')
View(data)
ggplot(data)+
geom_sf()
ggplot(data %>% filter(label == 0))+
geom_sf()
ggplot(data %>% filter(label == 2))+
geom_sf()
st_write(data, 'prueba.shp')
points <- st_read( "/home/laia/Escritorio/factor_data/deforestacion_montes/data/training_data.geojson")
points <- st_read( "./data/train_data_final.geojson")
points %>% filter(label == 0)
points %>% filter(label == 0) %>%
ggplot()+
geom_sf()
points %>%
ggplot(aes(color = as.factor(label)))+
geom_sf()
points <- st_read( "./data/train_data_final.geojson")
# Check for overlapping points
overlapping <- st_intersects(points, points)
# Output the rows with overlapping points
overlapping_indices <- which(overlapping)
overlapping_rows <- points[overlapping_indices, ]
# Output the rows with overlapping points
overlapping_indices <- which(overlapping)
points <- st_read( "./data/train_data_final.geojson")
# Check for overlapping points
overlapping <- st_intersects(points, points)
# Initialize an empty vector to store overlapping rows
overlapping_rows <- c()
# Iterate through each row and compare with other rows
for (i in 1:(nrow(points) - 1)) {
for (j in (i + 1):nrow(points)) {
if (st_intersects(points[i, ], points[j, ])) {
overlapping_rows <- c(overlapping_rows, i, j)
}
}
}
# Remove duplicates and sort the overlapping rows vector
overlapping_rows <- sort(unique(overlapping_rows))
overlapping
overlapping_rows <- points[overlapping_indices, ]
overlapping_rows <- points[overlapping, ]
overlapping
ggplot(intersects)+
geom_sf()
ggplot(overlapping)+
geom_sf()
p1 <- points %>% filter(label == 1)
p2 <- points %>% filter(label == 2)
points <- st_read( "./data/train_data_final.geojson")
p3 <- points %>% filter(label == 0)
p1 <- points %>% filter(label == 1)
st_contains(p1, p3)
st_join(p1, p3)
st_join(p1, p3, join = st_intersects)
x <- st_join(p1, p3, join = st_intersects)
x <- st_intersects(p1, p3)
View(p1)
View(p3)
?st_intersection
x <- st_intersection(p3, p1)
x <- st_intersection(p1, p3)
library(sf)
library(tidyverse)
#1sf_use_s2(FALSE)
predictions <- st_read('./data/test_predictions.geojson')
df_old <- st_read('./data/base_polygons/deforestacion_15-19.geojson')
predictions <- predictions %>% pivot_longer(cols = c(predictions_rf:predictions_xgb), names_to  = 'model', values_to = 'prediction') %>%
mutate(model = case_when(
model == "predictions_rf" ~ "RF",
model == "predictions_lr" ~ "LR",
model == "predictions_xgb" ~ "XGB"
))
predictions <- predictions %>%
mutate(error = case_when(
label == 1 & prediction == 1 ~ "TP",
label == 1 & prediction == 2 | label == 1 & prediction == 0 ~ "FN",
label == 0 & prediction == 1 | label == 2 & prediction == 1 ~ "FP",
TRUE ~ "TN"))
intersections <- predictions %>% st_intersection(df_old, left=FALSE)
group_int <- intersections %>%
as_tibble()%>% filter(error == "FP" & Fecha == 2019)
View(group_int)
library(sf)
library(tidyverse)
#1sf_use_s2(FALSE)
predictions <- st_read('./data/test_predictions.geojson')
df_old <- st_read('./data/base_polygons/deforestacion_15-19.geojson')
#df_old <- st_make_valid(df_old)
predictions <- st_read('./data/test_predictions.geojson')
View(predictions)
x <- predictions %>% select(-c(id, starts_with("pred_")))
View(x)
x <- predictions %>% select(-c(id, starts_with("predictions_")))
View(x)
x <- predictions %>% select(-c(id, NDVI_2020,starts_with("predictions_")))
library(tidyverse)
library(purrr)
library(sf)
library(sp)
region <- st_read("data/otbn/otbn_misiones.geojson")
sample_points <- st_sample(region, size = 3000, "random")
sample <- bind_rows(sample_points)
View(sample_points)
sample <- st_as_sf(sample_points)
View(sample)
sample <- st_as_sf(sample_points) %>%
rename(geometry = x)
sample <- st_as_sf(sample_points) %>%
rename(geometry = x) %>%
mutate(provincia = "Misiones")
View(sample)
st_write(sample, "data/test_region/points_misiones.geojson")
View(sample)
View(region)
library(tidyverse)
library(purrr)
library(sf)
library(sp)
region <- st_read("data/otbn/otbn_misiones.geojson")
sample_points <- st_sample(region, size = 3000, "random")
sample <- st_as_sf(sample_points) %>%
rename(geometry = x) %>%
mutate(provincia = "Misiones")
stat_sf_coordinates(sample)
stat_sf_coordinates(sample)
st_crs(sample)
st_transform(sample, crs = "WGS84")
sample <- st_transform(sample, crs = "WGS84")
st_write(sample, "data/test_region/points_misiones.geojson")
st_write(sample, "data/test_region/points_misiones.geojson", append = F)
st_write(sample, "data/test_region/points_misiones.geojson", append = F)
library(tidyverse)
library(purrr)
library(sf)
library(sp)
region <- st_read("data/otbn/otbn_misiones.geojson")
sample_points <- st_sample(region, size = 3000, "random")
sample <- st_as_sf(sample_points) %>%
rename(geometry = x) %>%
mutate(provincia = "Misiones")
sample <- st_transform(sample, crs = "WGS84")
st_write(sample, "data/test_region/points_misiones.geojson", append = F)
region <- st_read("data/test_region/data_final.geojson")
region <- st_read("data/test_region/ndvi_model_0-2.geojson")
View(region)
region <- st_read("data/test_region/data_final.geojson")
View(region)
library(tidyverse)
function (x, size, replace = FALSE, prob = NULL)
{
if (length(x) == 1L && is.numeric(x) && is.finite(x) &&
x >= 1) {
if (missing(size))
size <- x
sample.int(x, size, replace, prob)
}
else {
if (missing(size))
size <- length(x)
x[sample.int(length(x), size, replace, prob)]
}
}
library(tidyverse)
library(sf)
library(sp)
data <- st_read("data/test_region/data_final_preds.geojson")
View(data)
ggplot(data, aes(color = as.factor(RF_pred)))+
geom_sf()
ggplot(data, aes(color = as.factor(XGB_pred)))+
geom_sf()
data <- st_read("data/test_region/ndvi/ndvi_model_10-12.geojson")
data <- st_read("data/test_region/data_final.geojson")
